server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20 #The size of the sliding window used to record the outcome of calls when the circuit is closed
        permitted-number-of-calls-in-half-open-state: 5 #Number of permitted calls when the circuit is half-open
        failure-rate-threshold: 50 #When the failure rate is above the threshold, the circuit becomes open.
        wait-duration-in-open-state: 15000 #Waiting time before moving from open to half-open (ms)
  timelimiter:
    configs:
      default:
        timeout-duration: 5s #Configures a timeout (seconds)

spring:
  config:
    import: "optional:configserver:"
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  redis:
    port: 6379
    connect-timeout: 2s
    host: localhost
    timeout: 1s
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
              exceptions: java.io.IOException, java.util.concurrent.TimeoutException

      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker


#logging:
#  level:
#    io.github.resilience4j: DEBUG